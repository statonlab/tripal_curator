<?php

use PHPUnit\Framework\TestCase;

use \tripal_curator\CValue;

//some reading for organizing and annotating tests
//https://stackoverflow.com/questions/8313283/phpunit-best-practices-to-organize-tests
//https://jtreminio.com/2013/03/unit-testing-tutorial-introduction-to-phpunit/

final class Cvalue_test extends TestCase {

  public $cvalue = NULL;

  public $cvterm = NULL;

  public $fake_biomaterial_name = "Tripal Curator testing biomaterial";

  public $fake_biomat_id = NULL;
  public static function setUpBeforeClass() {


    //build fake cvterm
    $cvterm = tripal_insert_cvterm(
      [
        'name' => 'Curator Test',
        'definition' => 'A test CVterm.  Should be deleted in test.',
        'cv_name' => 'tripal',
        'is_relationship' => 0,
        'db_name' => 'tripal',
      ]
    );

    //insert a fake biomaterial

    $biomaterial_id = tripal_biomaterial_create_biomaterial("Tripal Curator testing biomaterial", NULL, NULL, NULL, NULL, NULL);




    $query = db_insert('chado.biomaterialprop')
      ->fields([
        'biomaterial_id' => $biomaterial_id,
        "type_id" => $cvterm->cvterm_id,
        "value" => "Curator Test",
        'cvalue_id' => $cvterm->cvterm_id,
      ]);
    $result = $query->execute();

  }

  public function setUp() {

    $cvalue = new CValue;
    $this->cvalue = $cvalue;

    //put fake cvterm in class
    $cvterm = tripal_get_cvterm(
      [
        'name' => 'Curator Test',
        'cv_id' => [
          'name' => 'tripal',
        ],
      ]
    );

    $contact_descrip_id = tripal_get_cvterm([
      'name' => 'contact_description',
      'cv_id' => ['name' => 'tripal_contact'],
    ]);
    $this->cvterm = $cvterm;


    $query = db_select('chado.biomaterial', 't')
      ->fields('t')
      ->condition('name', 'Tripal Curator testing biomaterial', '=');
    $result = $query->execute()->fetchObject();


    if (!$result) {
      print "ERROR: Class set up failed to get biomaterial";
    }

    $this->fake_biomat_id = $result->biomaterial_id;

  }

  public function test_initialize_property() {
    $cval = $this->cvalue;
    $this->assertInstanceOf(Cvalue::class, $cval);
  }

  public function test_initialize_biomat() {

    $biomat_id = $this->fake_biomat_id;

    $this->assertNotNull($biomat_id);

    $record = ['table' => "biomaterial", 'id' => $biomat_id];


    $biomat_prop = chado_get_property($record, [
      'type_name' => 'Curator Test',
      //  'cv_name' => 'tripal',
    ]);

    $this->assertNotNull($biomat_prop);

  }


  /**
   * @group failing
   * Tests defining the cvalue
   */

  public function test_defining_by_text() {

    $cval = $this->cvalue;

    //Risky test.  we don't create this ourselves.
    $cval->set_value_text("Leaf");

    $props = $cval->get_properties();

    $this->assertNotEmpty($props);

    foreach ($props as $table => $properties) {

      $this->assertNotNull($table);
      $this->assertNotEmpty($properties);

    }


  }

  public static function tearDownAfterClass() {
    //Delete fake biomaterial

    $values = ['name' => 'Tripal Curator testing biomaterial'];

    chado_delete_record('biomaterial', $values);


    //delete fake cvterm

    $cvterm = tripal_get_cvterm(
      [
        'name' => 'Curator Test',
        'cv_id' => [
          'name' => 'tripal',
        ],
      ]
    );


    $values = ['cvterm_id' => $cvterm->cvterm_id];
    chado_delete_record('cvterm', $values);


  }


}