<?php

use PHPUnit\Framework\TestCase;

use \tripal_curator\Chado_property;

//some reading for organizing and annotating tests
//https://stackoverflow.com/questions/8313283/phpunit-best-practices-to-organize-tests
//https://jtreminio.com/2013/03/unit-testing-tutorial-introduction-to-phpunit/

final class Chado_property_test extends TestCase {


  public $cvterm_test;

  public $cvterm_existing;

  public $property;


  protected function setUp() {

    $cvterm = tripal_insert_cvterm(
      [
        'name' => 'Curator Test',
        'definition' => 'A test CVterm.  Should be deleted in test.',
        'cv_name' => 'tripal',
        'is_relationship' => 0,
        'db_name' => 'tripal',
      ]
    );


    $this->cvterm_test = $cvterm;

    $property = new Chado_property();


    $query = [
      'name' => 'comment',
      'cv_id' => ['name' => 'cvterm_property_type'],
    ];

    $cvprop_term = tripal_get_cvterm($query);
    $this->cvterm_existing = $cvprop_term;
    $property->set_cvtermprop_search($cvprop_term->cvterm_id);
    $this->property = $property;

  }


  public function test_initialize_property() {
    $property = $this->property;
    $this->assertInstanceOf(Chado_property::class, $property);

  }

  public function test_set_cvtermprop_search_finds_properties() {
    $property = $this->property;
    $this->assertNotEmpty($property->get_props());
  }


  public function test_chadoprop_count_all() {
    $count = $this->property->get_total();
    $this->assertNotNull($count);

  }


  public function test_chadoprop_count_specific() {

    $count = $this->property->get_table_count("cvtermprop");
    $this->assertNotNull($count);

    $count = $this->property->get_table_count("analysisprop");
    $this->assertNull($count);

    $count = $this->property->get_table_count("seabass");
    $this->assertNull($count);

  }

  public function test_specify_tables() {

    $property = $this->property;

    $property->specify_tables(['cvtermprop']);
    $count = $this->property->get_table_count("cvtermprop");
    $this->assertNotEmpty($count);

    $this->property->set_cvtermprop_search($this->cvterm_term_existing);//specify all tables again...

  }

  public function testremap_property_all() {
    $this->property->remap_property_all($this->cvterm_test->cvterm_id);

    $this->assertEquals($this->cvterm_test->cvterm_id, $this->property->get_type_id());
    $this->assertNotEmpty($this->property->get_props());

  }


  //define a new test group here

  public function test_build_blank_cvalues_finds_properties() {
    $property = new Chado_property();

    $property->build_blank_cvalues();
    $target_props = $this->property->get_props();

    //first assert results have the cvalue_id column
    foreach ($target_props as $table => $properties) {
      $test_prop = array_pop($properties);
      $record_handle = $table . "_id";
      $record_id = $test_prop->$record_handle;
      var_dump($record_id);

     $result =  db_select(tripal_curator_chadofy($table))
        ->fields(["cvalue_id"])
        ->condition([$record_handle, $record_id])
        ->execute()->fetch();

     var_dump($result);

    }

    //Now assert our results do have empty cvalue_id

    $this->assertNotEmpty($this->property->get_props());


  }


  protected function tearDown() {


    $cvterm_existing = $this->cvterm_existing;
    $cvterm_test = $this->cvterm_test;


    //do another sweep for properties that we acciddentally changed to the test prop.
    $clean_property = new Chado_property();
    $clean_property->set_cvtermprop_search($cvterm_test->cvterm_id);
    $clean_property->remap_property_all($cvterm_existing->cvterm_id);


    $values = ['cvterm_id' => $cvterm_test->cvterm_id];
    chado_delete_record('cvterm', $values);

  }


}
