<?php

require_once '../includes/tripal_curator.api.inc';
use PHPUnit\Framework\TestCase;
use PHPUnit\DbUnit\TestCaseTrait;
//Change this path for the docker!
define('DRUPAL_ROOT', '/var/www/html');
//define('DRUPAL_ROOT', '/Users/chet/UTK/tripal');

$start = getcwd();

chdir(DRUPAL_ROOT);

require_once DRUPAL_ROOT . '/includes/bootstrap.inc';
$_SERVER['REMOTE_ADDR'] = '127.0.0.1';

drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);

chdir($start);


//some reading for organizing and annotating tests
//https://stackoverflow.com/questions/8313283/phpunit-best-practices-to-organize-tests
//https://jtreminio.com/2013/03/unit-testing-tutorial-introduction-to-phpunit/

final class tripal_curator_test extends TestCase
{
  public function testTrueIsTrue()
  {
    $foo = true;
    $this->assertTrue($foo);

  }

  public function test_property_tables_returned(){
    $tables = tripal_curator_get_property_tables();
    $this->assertNotEmpty($tables);

    $this->assertContains('biomaterialprop', $tables);
    $this->assertNotContains('featureprop_pub', $tables);

  }
  public function test_stringreplace(){
    $string="biomaterialprop";
    $expected = "biomaterial";
    $new_string = tripal_curator_str_lreplace("prop", "", $string);

    $this->assertEquals($expected, $new_string);

  }

  public function test_tripal_curator_fetch_props_for_prop_table(){
    $table = "cvtermprop";
    $props = tripal_curator_fetch_props_for_prop_table($table);
    $this->assertNotEmpty($props);
    $table = "assay";
    $props = tripal_curator_fetch_props_for_prop_table($table);
    $this->assertNull($props);
  }


  public function test_property_count_list(){

    $list = tripal_curator_get_cv_usage();

    $this->assertNotEmpty($list);

    //var_dump($list);

  }


}